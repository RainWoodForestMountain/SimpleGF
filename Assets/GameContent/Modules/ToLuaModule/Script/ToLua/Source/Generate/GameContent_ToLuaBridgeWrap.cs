//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameContent_ToLuaBridgeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameContent.ToLuaBridge), typeof(System.Object));
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("AddListener", AddListener);
		L.RegFunction("RemoveListener", RemoveListener);
		L.RegFunction("Recevive", Recevive);
		L.RegFunction("New", _CreateGameContent_ToLuaBridge);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameContent_ToLuaBridge(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameContent.ToLuaBridge obj = new GameContent.ToLuaBridge();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameContent.ToLuaBridge.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameContent.ToLuaBridge obj = (GameContent.ToLuaBridge)ToLua.CheckObject<GameContent.ToLuaBridge>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<GameFramework.Message> arg0 = (System.Action<GameFramework.Message>)ToLua.CheckDelegate<System.Action<GameFramework.Message>>(L, 1);
			GameContent.ToLuaBridge.AddListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<GameFramework.Message> arg0 = (System.Action<GameFramework.Message>)ToLua.CheckDelegate<System.Action<GameFramework.Message>>(L, 1);
			GameContent.ToLuaBridge.RemoveListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Recevive(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<GameFramework.ByteBuffer>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.MessageType arg1 = (GameFramework.MessageType)ToLua.CheckObject(L, 2, typeof(GameFramework.MessageType));
				GameFramework.ByteBuffer arg2 = (GameFramework.ByteBuffer)ToLua.ToObject(L, 3);
				GameContent.ToLuaBridge.Recevive(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Object>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.MessageType arg1 = (GameFramework.MessageType)ToLua.CheckObject(L, 2, typeof(GameFramework.MessageType));
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.ToObject(L, 3);
				GameContent.ToLuaBridge.Recevive(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.MessageType arg1 = (GameFramework.MessageType)ToLua.CheckObject(L, 2, typeof(GameFramework.MessageType));
				string arg2 = ToLua.ToString(L, 3);
				GameContent.ToLuaBridge.Recevive(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.MessageType arg1 = (GameFramework.MessageType)ToLua.CheckObject(L, 2, typeof(GameFramework.MessageType));
				UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.ToObject(L, 3);
				GameContent.ToLuaBridge.Recevive(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameContent.ToLuaBridge.Recevive");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

