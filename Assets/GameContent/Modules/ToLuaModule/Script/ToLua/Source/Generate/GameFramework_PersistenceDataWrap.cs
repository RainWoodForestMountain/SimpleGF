//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_PersistenceDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("PersistenceData");
		L.RegFunction("SavePrefsData", SavePrefsData);
		L.RegFunction("GetPrefsData", GetPrefsData);
		L.RegFunction("GetPrefsDataInt", GetPrefsDataInt);
		L.RegFunction("GetPrefsDataLong", GetPrefsDataLong);
		L.RegFunction("GetPrefsDataFloat", GetPrefsDataFloat);
		L.RegFunction("GetPrefsDataDouble", GetPrefsDataDouble);
		L.RegFunction("GetPrefsDataBool", GetPrefsDataBool);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SavePrefsData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				GameFramework.PersistenceData.SavePrefsData(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				double arg1 = (double)LuaDLL.lua_tonumber(L, 2);
				GameFramework.PersistenceData.SavePrefsData(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				GameFramework.PersistenceData.SavePrefsData(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.PersistenceData.SavePrefsData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefsData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string o = GameFramework.PersistenceData.GetPrefsData(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefsDataInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = GameFramework.PersistenceData.GetPrefsDataInt(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefsDataLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			long arg1 = LuaDLL.tolua_checkint64(L, 2);
			long o = GameFramework.PersistenceData.GetPrefsDataLong(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefsDataFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float o = GameFramework.PersistenceData.GetPrefsDataFloat(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefsDataDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			double arg1 = (double)LuaDLL.luaL_checknumber(L, 2);
			double o = GameFramework.PersistenceData.GetPrefsDataDouble(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPrefsDataBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			bool o = GameFramework.PersistenceData.GetPrefsDataBool(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

