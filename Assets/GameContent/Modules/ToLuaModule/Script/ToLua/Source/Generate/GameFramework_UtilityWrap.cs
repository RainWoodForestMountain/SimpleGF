//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_UtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Utility");
		L.RegFunction("Log", Log);
		L.RegFunction("LogWarning", LogWarning);
		L.RegFunction("LogError", LogError);
		L.RegFunction("RecordTexture2DFile", RecordTexture2DFile);
		L.RegFunction("LoadConfigFile", LoadConfigFile);
		L.RegFunction("LoadPersistentConfigFile", LoadPersistentConfigFile);
		L.RegFunction("LoadResourceConfigFile", LoadResourceConfigFile);
		L.RegFunction("RecordConfigTextFile", RecordConfigTextFile);
		L.RegFunction("DepartDictionaryByLines", DepartDictionaryByLines);
		L.RegFunction("isNull", isNull);
		L.RegFunction("MD5", MD5);
		L.RegFunction("MD5File", MD5File);
		L.RegFunction("MakeUnifiedDirectory", MakeUnifiedDirectory);
		L.RegFunction("CreateTimer", CreateTimer);
		L.RegFunction("CreateDelayInvok", CreateDelayInvok);
		L.RegFunction("RemoveTimer", RemoveTimer);
		L.RegFunction("ChangedTimerSpecaTime", ChangedTimerSpecaTime);
		L.RegFunction("ChangedTimerLoopCount", ChangedTimerLoopCount);
		L.RegFunction("PlayerAnimationAndCloseOnComplete", PlayerAnimationAndCloseOnComplete);
		L.RegFunction("MergeString", MergeString);
		L.RegFunction("GetFileNameWithoutExtension", GetFileNameWithoutExtension);
		L.RegFunction("PoolPush", PoolPush);
		L.RegFunction("PoolPop", PoolPop);
		L.RegFunction("RealtimeSinceStarGetTime", RealtimeSinceStarGetTime);
		L.RegFunction("Encrypt", Encrypt);
		L.RegFunction("Decrypt", Decrypt);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckParamsType<string>(L, 1, count))
			{
				string[] arg0 = ToLua.ToParamsString(L, 1, count);
				GameFramework.Utility.Log(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				GameFramework.Utility.Log(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.Log");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarning(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckParamsType<string>(L, 1, count))
			{
				string[] arg0 = ToLua.ToParamsString(L, 1, count);
				GameFramework.Utility.LogWarning(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				GameFramework.Utility.LogWarning(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.LogWarning");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckParamsType<string>(L, 1, count))
			{
				string[] arg0 = ToLua.ToParamsString(L, 1, count);
				GameFramework.Utility.LogError(arg0);
				return 0;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				GameFramework.Utility.LogError(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.LogError");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecordTexture2DFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameFramework.Utility.RecordTexture2DFile(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadConfigFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameFramework.Utility.LoadConfigFile(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPersistentConfigFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameFramework.Utility.LoadPersistentConfigFile(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadResourceConfigFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameFramework.Utility.LoadResourceConfigFile(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecordConfigTextFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<GameFramework.Dictionary<string,string>>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.Dictionary<string,string> arg1 = (GameFramework.Dictionary<string,string>)ToLua.ToObject(L, 2);
				GameFramework.Utility.RecordConfigTextFile(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				GameFramework.Utility.RecordConfigTextFile(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.RecordConfigTextFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DepartDictionaryByLines(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			GameFramework.Dictionary<string,string> o = GameFramework.Utility.DepartDictionaryByLines(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 1);
			bool o = GameFramework.Utility.isNull(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MD5(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameFramework.Utility.MD5(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MD5File(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string o = GameFramework.Utility.MD5File(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string o = GameFramework.Utility.MD5File(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.MD5File");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MakeUnifiedDirectory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string o = GameFramework.Utility.MakeUnifiedDirectory(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				string o = GameFramework.Utility.MakeUnifiedDirectory(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.MakeUnifiedDirectory");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			long o = GameFramework.Utility.CreateTimer(arg0, arg1, arg2, arg3);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDelayInvok(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			long o = GameFramework.Utility.CreateDelayInvok(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			GameFramework.Utility.RemoveTimer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangedTimerSpecaTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameFramework.Utility.ChangedTimerSpecaTime(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangedTimerLoopCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameFramework.Utility.ChangedTimerLoopCount(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayerAnimationAndCloseOnComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			GameFramework.Utility.PlayerAnimationAndCloseOnComplete(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MergeString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, long>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				long arg1 = LuaDLL.tolua_toint64(L, 2);
				string o = GameFramework.Utility.MergeString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<string>(L, 1, count))
			{
				string[] arg0 = ToLua.ToParamsString(L, 1, count);
				string o = GameFramework.Utility.MergeString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				string o = GameFramework.Utility.MergeString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.Utility.MergeString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileNameWithoutExtension(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = GameFramework.Utility.GetFileNameWithoutExtension(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PoolPush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			GameFramework.Utility.PoolPush(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PoolPop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.GameObject o = GameFramework.Utility.PoolPop(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RealtimeSinceStarGetTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = GameFramework.Utility.RealtimeSinceStarGetTime();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Encrypt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			byte[] o = GameFramework.Utility.Encrypt(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Decrypt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			byte[] o = GameFramework.Utility.Decrypt(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

