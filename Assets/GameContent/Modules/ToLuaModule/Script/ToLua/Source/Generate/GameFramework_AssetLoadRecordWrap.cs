//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_AssetLoadRecordWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.AssetLoadRecord), typeof(System.Object));
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("LoadGameObject", LoadGameObject);
		L.RegFunction("LoadInstantiateGameObject", LoadInstantiateGameObject);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("LoadTexture", LoadTexture);
		L.RegFunction("LoadTexture2D", LoadTexture2D);
		L.RegFunction("LoadText", LoadText);
		L.RegFunction("LoadMaterial", LoadMaterial);
		L.RegFunction("LoadAudioClip", LoadAudioClip);
		L.RegFunction("LoadLuaFileBytes", LoadLuaFileBytes);
		L.RegFunction("New", _CreateGameFramework_AssetLoadRecord);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("name", get_name, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_AssetLoadRecord(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameFramework.AssetLoadRecord obj = new GameFramework.AssetLoadRecord(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.AssetLoadRecord.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.LoadGameObject(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadInstantiateGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.LoadInstantiateGameObject(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.LoadSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Texture o = obj.LoadTexture(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTexture2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Texture2D o = obj.LoadTexture2D(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.LoadText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Material o = obj.LoadMaterial(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AudioClip o = obj.LoadAudioClip(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLuaFileBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)ToLua.CheckObject<GameFramework.AssetLoadRecord>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaInterface.LuaByteBuffer o = obj.LoadLuaFileBytes(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.AssetLoadRecord obj = (GameFramework.AssetLoadRecord)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}
}

