
syntax = "proto2";

package fr_common ;

// ============================================================================================
// 
// 服务器到服务器的请求消息标准头部
// 
// ============================================================================================
message ServerToServerHead
{
	// 发送方serverid
	required uint64 senderrouterid     = 1 [default = 0] ;
	
	// 参考FrameworkCommon.h文件
	// 接收方服务器类型 (游戏gid*5+游戏类型kind) 
	optional int32 destservertype      = 2;
	
	// 接收方服务器id
	optional uint64 destrouterid       = 3 ;
	
	// 用户在网关上的sessionid，网关回复响应消息时所必须的
	required uint64 sessionid          = 4 [default = 0] ;
	
	// 用户账号信息
	optional string account            = 5 ;
	
	// 用户的IP地址信息
	optional string useripaddr         = 6 ;
	
	// 由系统分配给用户id
	optional uint64 usertoken          = 7 ;

	// game消息必填的roomid
	optional uint64 roomid             = 8 ;
};

// ============================================================================================
// 
// 通用头部消息匹配
// 
// ============================================================================================
message BaseHead
{
	required ServerToServerHead head = 1; 	// 通用头部信息
}

// ============================================================================================
// 
// 消息id
// 
// ============================================================================================
enum MsgID
{
	option allow_alias = true ;

	MsgID_Min                           = 100000 ;
	MsgID_Max                           = 100999 ;
	
	// 服务器之间的认证消息
	MsgID_AuthReq                       = 100000 ;
	MsgID_AuthAck                       = 100001 ;
	
	// 心跳消息
	MsgID_HeartBeatReq                  = 100002 ;
	MsgID_HeartBeatAck                  = 100003 ;
}

// ============================================================================================
// 
// 服务器之间的认证请求消息
// server->server
// 
// ============================================================================================
message AuthReq
{
	required string password                    = 1 ; // 密码
	required string selfdescription             = 2 ; // 自身描述信息
}

// ============================================================================================
// 
// 服务器之间的认证响应消息，密码不正确会直接断开连接
// server->server
// 
// ============================================================================================
message AuthACK
{
	enum Result
	{
		OK         = 0 ;	// 成功
		FAILED     = 1 ;	// 失败
	}
	
	// ------------------------------------------------------------------------------------------
	required Result result                      = 1 ; // 结果
	required string selfdescription             = 2 ; // 自身描信息
}

// ============================================================================================
// 
// 心跳请求
// server->server or client->server
// 
// ============================================================================================
message HeartBeatReq
{
	
}

// ============================================================================================
// 
// 心跳响应
// server->server or client->server
// 
// ============================================================================================
message HeartBeatAck
{
	required int64  timenow                     = 1 ; // 服务器当前时间戳
}
